/*
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */

// See https://github.com/Ail-nare/Range-Vector for library's documentation and updates

#ifndef RANGE_VECTOR_HPP
#define RANGE_VECTOR_HPP

#include <vector>
#include "range.hpp"

template <typename T, typename _alloc = std::allocator<T>>
class vector : public std::vector<T, _alloc> {
    typedef std::vector<T, _alloc> _base;

public:
    // Constructor
    vector() noexcept(std::is_nothrow_default_constructible<_alloc>::value)
        : _base()
    {}

    explicit vector(const typename _base::allocator_type& _a) noexcept
        : _base(_a)
    {}

    explicit vector(typename _base::size_type _n,
    const typename _base::allocator_type& _a = typename _base::allocator_type())
        : _base(_n, _a)
    {}

    vector(typename _base::size_type _n, const T& _value,
    const typename _base::allocator_type& _a = typename _base::allocator_type())
        : std::vector<T, _alloc>(_n, _value, _a)
    {}

    vector(const vector& _x)
        : _base(_x)
    {}

    vector(vector&& _x) noexcept
        : _base(std::move(_x))
    {}

    vector(const vector& _x, const typename _base::allocator_type& _a)
        : _base(_x, _a)
    {}

    vector(vector&& _rv, const typename _base::allocator_type& _m)
        : _base(std::move(_rv), _m)
    {}

    vector(std::initializer_list<T> _l,
    const typename _base::allocator_type& _a = typename _base::allocator_type())
        : _base(_l, _a)
    {}

    template<typename InputIterator, typename = std::_RequireInputIter<InputIterator>>
    vector(InputIterator _first, InputIterator _last,
    const typename _base::allocator_type& _a = typename _base::allocator_type())
        : _base(_first, _last, _a)
    {}


    // Operator =
    inline vector& operator=(const vector& x)
    {
        *static_cast<_base *>(this) = x;
        return *this;
    }

    inline vector& operator=(vector&& x) noexcept
    {
        *static_cast<_base *>(this) = std::move(x);
        return *this;
    }

    inline vector& operator=(std::initializer_list<T> _l)
    {
        *static_cast<_base *>(this) = _l;
        return *this;
    }


    // Operator []
    [[maybe_unused]] [[nodiscard]] typename _base::reference operator[](typename std::make_signed<typename _base::size_type>::type n) noexcept
    {
        return static_cast<_base *>(this)->operator[]((n < 0) ? n + this->size() : n);
    }

    [[maybe_unused]] [[nodiscard]] typename _base::const_reference operator[](typename std::make_signed<typename _base::size_type>::type n) const noexcept
    {
        return static_cast<const _base *>(this)->operator[]((n < 0) ? n + this->size() : n);
    }



    // New feature start there

    typedef ptrdiff_t difference_type;
#if __cplusplus >= 201703L // if version >= C++17
    typedef std::optional<ptrdiff_t> opt_difference_type;
#else // else version < C++17
    typedef _range_optional_CXX14 opt_difference_type;
#endif

public:

    // Operator ()
    [[maybe_unused]] [[nodiscard]] inline auto operator()(difference_type start)
    {
        return range<vector>(*this)(start);
    }

    [[maybe_unused]] [[nodiscard]] inline auto operator()(difference_type start) const
    {
        return range<const vector>(*this)(start);
    }

    [[maybe_unused]] [[nodiscard]] inline auto operator()(opt_difference_type start, opt_difference_type end)
    {
        return range<vector>(*this)(start, end);
    }

    [[maybe_unused]] [[nodiscard]] inline auto operator()(opt_difference_type start, opt_difference_type end) const
    {
        return range<const vector>(*this)(start, end);
    }

    [[maybe_unused]] [[nodiscard]] inline auto operator()(opt_difference_type start, opt_difference_type end, difference_type step)
    {
        return range<vector>(*this)(start, end, step);
    }

    [[maybe_unused]] [[nodiscard]] inline auto operator()(opt_difference_type start, opt_difference_type end, difference_type step) const
    {
        return range<const vector>(*this)(start, end, step);
    }
};

#endif //RANGE_VECTOR_HPP
